# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

                  - name: Datadog Static Analysis
  # You may pin to the exact commit or the version.
  # uses: DataDog/datadog-static-analyzer-github-action@8f2b6213cadc5fef47befda2dc3f1d7c68f33ddd
  uses: DataDog/datadog-static-analyzer-github-action@v1.0.7
  with:
    # Your Datadog API key used to authenticate requests.
    dd_api_key: # default is 
    # Your Datadog Application key used to authenticate requests.
    dd_app_key: # default is 
    # The service you want your results tagged with.
    dd_service: # default is 
    # The environment you want your results tagged with.
    dd_env: # optional, default is none
    # The Datadog site. For example, users in the EU may want to set datadoghq.eu.
    dd_site: # optional, default is datadoghq.com
    # Set the number of CPUs used to by the analyzer.
    cpu_count: # optional, default is 2
    # Get the execution time statistics for analyzed files.
    enable_performance_statistics: # optional, default is false
    # Lets the analyzer print additional logs useful for debugging.
    debug: # optional, default is no
    # The subdirectory path the analysis should be limited to.
    subdirectory: # optional, default is 
                      - name: Datadog Static Analysis
  # You may pin to the exact commit or the version.
  # uses: DataDog/datadog-static-analyzer-github-action@8f2b6213cadc5fef47befda2dc3f1d7c68f33ddd
  uses: DataDog/datadog-static-analyzer-github-action@v1.0.7
  with:
    # Your Datadog API key used to authenticate requests.
    dd_api_key: # default is 
    # Your Datadog Application key used to authenticate requests.
    dd_app_key: # default is 
    # The service you want your results tagged with.
    dd_service: # default is 
    # The environment you want your results tagged with.
    dd_env: # optional, default is none
    # The Datadog site. For example, users in the EU may want to set datadoghq.eu.
    dd_site: # optional, default is datadoghq.com
    # Set the number of CPUs used to by the analyzer.
    cpu_count: # optional, default is 2
    # Get the execution time statistics for analyzed files.
    enable_performance_statistics: # optional, default is false
    # Lets the analyzer print additional logs useful for debugging.
    debug: # optional, default is no
    # The subdirectory path the analysis should be limited to.
    subdirectory: # optional, default is 
          
